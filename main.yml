--- 
- hosts: pve 
  vars:
    container_id: 204
  become: true
  become_user: root
  tasks:
    
    - name: Include role
      ansible.builtin.include_role:
        name: vars

    - name: Include variables vault from a file
      ansible.builtin.include_vars:
        file: roles/vars/main.yml

    - name: Create a container with DHCP for automatic IP assignment
      proxmox:
        vmid: "{{ container_id  }}" # Specify the ID of the container
        api_user: "{{ pmx_api_user }}" # Proxmox user
        api_password: "{{ pmx_api_password }}" # Password in plaintext !!!
        api_host: "{{ pmx_api_host }}" # Proxmox hostname
        password: "{{ pmx_api_password }}" # Password in plaintext !!!
        hostname: 'container1' # Specify the hostname of the container
        node: 'pve' # Specify the name of the Proxmox host
        cores: '1' # Specify the number of cores to allocate to the container
        cpus: '1' # Specify the number of CPUs to allocate to the container
        cpuunits: '1000' # Specify the CPU units to allocate
        ostemplate: 'local:vztmpl/centos-8-stream-default_20220327_amd64.tar.xz' # Specify the template to use for the operating system
        storage: 'local-lvm' # Specify the storage location
        disk: '16' # Specify the size of the disk
        memory: '1024' # Specify the amount of memory to allocate
        swap: 512 # Specify the size of the swap partition
        onboot: 1 # Specify that the container should be automatically started on boot
        netif: '{"net0":"name=eth0,ip=dhcp,ip6=dhcp,bridge=vmbr0"}' # Configure the network interface to use DHCP for automatic IP assignment
        state: 'present' # Specify the desired state of the container
      register: container_info # Save the result of the task in a variable


    - name: make sure container is started
      proxmox:
        vmid: "{{ container_id  }}"
        api_user: "{{ pmx_api_user }}"
        api_password: "{{ pmx_api_password }}"
        api_host: "{{ pmx_api_host }}"
        state: started

    - name: Wait for the Container
      pause:
        seconds: 30        

    - name: Get Container IP
      shell: pct exec "{{ container_id  }}" ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d '/' -f 1
      changed_when: false
      register: ip_container

    - name: Install SSH 
      shell: pct exec "{{ container_id  }}" -- bash -c  "yum install openssh-server openssh-clients -y && systemctl start sshd && systemctl enable sshd"
      changed_when: false

    - name: Add container 
      lineinfile:
        path: Users/cristiangomez/Documents/DevOps/Ansible_controll/inventory.txt
        line: "container1 ansible_host={{ ip_container }} ansible_user=root"
        create: true
      become: true

    - name: Copy SSH public key
      authorized_key:
        user: root
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      register: authorized_key_result

    - name: show aut key
      debug:
        var: authorized_key_result.key

    - name: Add authorized key to container
      shell: pct exec "{{ container_id  }}" -- bash -c 'echo "{{ authorized_key_result.key }}" >> ~/.ssh/authorized_keys'
      changed_when: false


    - name: Show current status of container
      debug:
        var: container_info





      
